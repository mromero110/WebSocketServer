// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace SVAIOT_Database
{
    public partial class SvaiotContext : DbContext
    {
        public SvaiotContext()
        {
        }

        public SvaiotContext(DbContextOptions<SvaiotContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Dispositivo> Dispositivo { get; set; }
        public virtual DbSet<DispositivoConfiguracion> DispositivoConfiguracion { get; set; }
        public virtual DbSet<DispositivoHistorico> DispositivoHistorico { get; set; }
        public virtual DbSet<DispositivoZonasegura> DispositivoZonasegura { get; set; }
        public virtual DbSet<DispositivoZonawifi> DispositivoZonawifi { get; set; }
        public virtual DbSet<Gps> Gps { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<UsuarioCredenciales> UsuarioCredenciales { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<Dispositivo>(entity =>
            {
                entity.ToTable("dispositivo");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Placa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("placa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Dispositivo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dispositivos_usuarios");
            });

            modelBuilder.Entity<DispositivoConfiguracion>(entity =>
            {
                entity.ToTable("dispositivo_configuracion");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alarma).HasColumnName("alarma");

                entity.Property(e => e.ApagadoEmergencia).HasColumnName("apagado_emergencia");

                entity.Property(e => e.Camara).HasColumnName("camara");

                entity.Property(e => e.Genera)
                    .HasPrecision(0)
                    .HasColumnName("genera");

                entity.Property(e => e.IdDispositivo).HasColumnName("id_dispositivo");

                entity.Property(e => e.Zonawifi).HasColumnName("zonawifi");

                entity.HasOne(d => d.IdDispositivoNavigation)
                    .WithMany(p => p.DispositivoConfiguracion)
                    .HasForeignKey(d => d.IdDispositivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dispositivo_configuracion_dispositivos");
            });

            modelBuilder.Entity<DispositivoHistorico>(entity =>
            {
                entity.ToTable("dispositivo_historico");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alarma).HasColumnName("alarma");

                entity.Property(e => e.ApagadoEmergencia).HasColumnName("apagado_emergencia");

                entity.Property(e => e.Camara).HasColumnName("camara");

                entity.Property(e => e.Genera)
                    .HasPrecision(0)
                    .HasColumnName("genera");

                entity.Property(e => e.IdDispositivo).HasColumnName("id_dispositivo");

                entity.Property(e => e.Zonawifi).HasColumnName("zonawifi");

                entity.HasOne(d => d.IdDispositivoNavigation)
                    .WithMany(p => p.DispositivoHistorico)
                    .HasForeignKey(d => d.IdDispositivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dispositivo_historico_dispositivos");
            });

            modelBuilder.Entity<DispositivoZonasegura>(entity =>
            {
                entity.ToTable("dispositivo_zonasegura");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.IdDispositivo).HasColumnName("id_dispositivo");

                entity.Property(e => e.Latitud)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("latitud");

                entity.Property(e => e.Longitud)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("longitud");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Presicion).HasColumnName("presicion");

                entity.Property(e => e.Rango).HasColumnName("rango");

                entity.HasOne(d => d.IdDispositivoNavigation)
                    .WithMany(p => p.DispositivoZonasegura)
                    .HasForeignKey(d => d.IdDispositivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dispositivo_zonasegura_dispositivos");
            });

            modelBuilder.Entity<DispositivoZonawifi>(entity =>
            {
                entity.ToTable("dispositivo_zonawifi");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EsFisico).HasColumnName("es_fisico");

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.IdDispositivo).HasColumnName("id_dispositivo");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serial");

                entity.HasOne(d => d.IdDispositivoNavigation)
                    .WithMany(p => p.DispositivoZonawifi)
                    .HasForeignKey(d => d.IdDispositivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dispositivo_zonawifi_dispositivos");
            });

            modelBuilder.Entity<Gps>(entity =>
            {
                entity.ToTable("gps");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Genera)
                    .HasPrecision(0)
                    .HasColumnName("genera");

                entity.Property(e => e.IdDispositivo).HasColumnName("id_dispositivo");

                entity.Property(e => e.Latitud)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("latitud");

                entity.Property(e => e.Longitud)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("longitud");

                entity.Property(e => e.Prescicion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("prescicion");

                entity.HasOne(d => d.IdDispositivoNavigation)
                    .WithMany(p => p.Gps)
                    .HasForeignKey(d => d.IdDispositivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gps_dispositivos");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.ToTable("usuario");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Activo).HasColumnName("activo");

                entity.Property(e => e.Apellido)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("apellido");

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("correo");

                entity.Property(e => e.Documento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("documento");

                entity.Property(e => e.Genera)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("genera");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telefono");
            });

            modelBuilder.Entity<UsuarioCredenciales>(entity =>
            {
                entity.HasKey(e => e.IdUsuario);

                entity.ToTable("usuario_credenciales");

                entity.Property(e => e.IdUsuario)
                    .ValueGeneratedNever()
                    .HasColumnName("id_usuario");

                entity.Property(e => e.CrypPassword)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cryp_password");

                entity.Property(e => e.CrypUsername)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cryp_username");

                entity.Property(e => e.SerialDispositivo)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("serial_dispositivo");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithOne(p => p.UsuarioCredenciales)
                    .HasForeignKey<UsuarioCredenciales>(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_usuario_credenciales_usuarios");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}